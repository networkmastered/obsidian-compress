//Credit: github networkmaster
import { BB } from "./BB.js"
import LZ from "./runlengthMatch.js"
import { inflate, deflate } from "./pako.js"
import { decodeSafe, encodeSafe } from "./runlength.js"

import * as excalidraw from "./pluginCompression/excalidraw.js"

//DO NOT REORDER. MAX: 32
const plugins = [
    excalidraw,

]

//compressed json. (dictionaryBIG.json)
let wordDict = (() => { let r = new BB(); r.F(""); let pr = []; while (true) { let m = r.RU(8); if (isNaN(m)) break; pr.push(m) } return new TextDecoder().decode(inflate(new Uint8Array(pr))).split(";") })()

//compressed json. (dictionaryBIG2.json)
let wordDictLarge = (() => { let r = new BB(); r.F(decodeSafe("4xZb9ulmjrzrsgDMNaokotVaJRv0F705opf9MF6X3TsOuAKpaf6vu3n_óVm2SkgABCEAMPm72WKzDdpxxvNdPSLput8yw62QXTqfaYG_nLpthyczSe9VZedodYcYD_wlF_30nn7yN9DrpXvKDzbT55N8D_C_r4_C_uvz_zfEfUd4zZbYbn_h0I-X75XzQL-Lmv3k76GzrDJ-Qg_V8RmXwv-W9xI1vi_Yq7B_hHwX_2wN8Te-Jnwfzc51Y-f-kx_6cZ-1S51yA-wW-2g3sZ8Gsc8J3VmwTfv_j83EfD7Dr6LS_w3KLT-fdf-_2zr6FoFLdTp5hb4Pr_x1mV8_ueDrólB8vuPzXixxh7Dt4paf-y_OWJHTrrnvC47tbZAL9HvRb5pXb7l9V8RNMzXR8Wvka1L46LsHmiNF-KMPnGWXTcTB7ILc5pLj3hXN81bfO-eW9PMWd27iFnltH7Tt5lx0cPeIxPOWtmGW5r_6-LYXgHFufvpHyy-S6eWb3dDLd7TelHbZrfXxzcaLsr4H1MszGH1z81XQ8Jf1MDmKT7jbDvGrrGL5yyds4-n_jDL0UqgNf9Rhty5uhXJ8yPkXrPGcFh_wpO-KMiNwp4ZmvA3D758vnrHZ--yVrjP502GPLgno586azwENgX92d2vRv5SbYAj_YH2C8nMWyOM41nMMFTYHZTfUpb38zH-axizrHlV8_hf6O-Qm_t-FNyfY8EdL-e5K56AXeSzZbMADp9Os5uebXnf5GW-RmHSxDZ8vhXh4IZa1P-6xgWIXO4gvo3-skdFU25xu20oMkmybYfoMWurjk9D4dQWWaprecGOC4uwLtw1l-_yRh_o4K-5WmsrsR4-CemxqOMMg9LewnD75S1e-Oe0XwvZ1YI2Ui9otc3D5K7yncqdP-exPaPPwGHr6zTlLfUyóetM6NF8-m4mSYAjfn9L_wl35lPPyjwu9OXrwCxl_1U3z5ynxc_dtsjd_FsB0Psp1KdkUbRv5X0nyC2jwKNOgiXfs7jTZ83TfvVnVlFd-dfugfU7EdfVOV_f-_c6Vdy23yXJ-mgXr-9luHP2nnzzNvxfc40ge-_5_3p8Sp0mx5jnra5ZA7SrDVvOHm3-Bpf_8XOPaL4MdJAfD8n0P04cM2lon79xqvw82GWNwTLcwc1rKeGz_iVuySP2VojwqntwDbPtMgvI-dw_tO-arHg_xTWD972eeMHv9LHuPLv4XL-ZlNhWf8_iO2umXen_Zv_eWfmvS2JE3yzD3f0CXcPKle4eHWgdP257y6FL6jADwh2Lv7PGfD6ThP1ZEowuFbzJYjvSHc43bf-meysF3AWvxKz94NiPnb4kgejw5qL-alvHvWgfvF8YulrrLcPGu_Q8F5d8xwYZtg_Heo9RaU-n_vdeqUu35Dg-JjgMjH-C6RoK8h2mwm9UbaZBLAhXk3lRH4ehP1c3sLebh1TAPwr1rD3nlHG879usPun_FvV1TfzHILCfAD2sWxKiI2r_DMDYaxfjLB7xO2M_xiobnHt8nSSW88n8AZzfwqDxH2hv6l6zJfjgxrCVPEe2HEqGEWfnhp3XsN4x3A3p7fz3mVvrsu3WD_R_HYh9ivVcmMzTf4Mxi2jgr29U4dc2-PqvR4UM_4xCSzr1vdPu401Hvp7Cc6m24b4jgOEbghLeh0RQdO640BRIhlOaf2-_enG_b43bTejjTcMiJXK4PJ_9e5w94NyxSxqtebVoS4aK84BvM4BpTOJbaH4pv7PST3HkTp4gMPHRP2RwB9Nk_9RaH78-Pp1ih3-5UhyVUmur7mFZ1dEAS7Y2rJ_BRsIYz3zzsYp-ZTNQyhDyOgCzhPZom889NsdWXlul4BQF9ffje_D0r4Yy98Gix643H-35vXp9nIau-9OQcoVXAtGnzGuYt6Q5b5AS4yy-Lubi1lMCE8yrE_HtNOseOOF5_Et-OcErdKc6oMjnu6npiydn4byvO8g7nrqFyVvw6EXvgfsarAYkjlSDeZY5A3vteuNmqIo4ekxb3pzRVsL23zX8pVtdl9yvDTR01kfj8-H_0Ph0E4bZcuuvNX8gYvp3yHxHglzIeHKjYxY98sp8JnnHlfR7_0RFPCthIKwpCjKuIvU7KEhtIXMwt1wiUHpD7F8WP33n25n7i_TyYDWR0epci3dY-GQ0u9dF4dXPw36Yl7zfGG5zt2_4DBxoZfPGlM8qsaYUI0Mjjto_E-b5W5Zcs5L7tHnph1KdCVPSva40b7YVhvDK2BiHtUBiLAlRMnLpdVjkUXzuEdi-BPQ7z99zT4MthrWyft16REB6zosEQf57XprbP89QwKMTNbFcJTUaDOf-589fsz-qYc4N-B-oRKr4b4n826-GRUx1l7VU7jOOd9PbIdwZg9e_Inpdz4QGQM97A-nP8Y6THyy62_4ZXm_0li-TY76F-ZWzCp3SegR47yH2gMBQbzjnz20x6CR1CHMh1zpvVFTFnFHeNEQ8odW7QBGf48Fjb-yvAxZ6IDcfCoTJzw_11GaTBjVeoGvfPICpCBTTbiKcI_sAfPLE_UiGs_DKhvxbbgfq52-sd8J7z5M8kqMH9pqTsc5rx4kXxsCnvkCeDeUmJ8GuWn_NpPz1xyev9mOV69vHTuOviIyOaP2xnP8vcjo8PgNfNX1-mfQw71XL7mnCg48C6Q69vLjXwPpFanxQC11sLYUMeCkdwQwNwV8E4EQCfO64_QC7RtlRdqBn5Xvs_xdzNxbBW8lV-Fgy49zpg0RMFGrRNGO-2fNqjYE62Wyni7HCUsOOS5-hF570osXxbLeuQmlVLLhMeock_Le3enuHevHH3rAyWdaYyBKfWAyxx9uTCJIGl8_XfK0uW-uOOdkdmu1UotXR4iZCP1diNgyBuHZ1GJQivJhtynVuiK57V2CKAL100_z_neeUJOkdAtadCB_34mwDnl2dc0GPJPK8DWu9vhH0BFm5ijXD0KoVxBVX_iA3YlkciJGimqP2I6UhPO1sx5WI5uYGmdX5OTHIQCW7jH5tnHvhHNtwcxQTBI-hIiuNoDEC9uICTBjnJc49XnAmQYt6ziIZxpClvEw1_bXcqgED5p_xvMvAZg6z0C82UYE-KyK-9-4d6b0L2XTlSBKP4aAbuwI5gbwH47Jt3ivvZm8EN7UuhYFkpWjFQS7xwKBgCXZ87H4Xpx0FG3EPRKxZ9NMdmex3LJKLXDABaQX4ocEeBoFybCxnUaZYFsgvppjMmJ9CjRusrXB16v9z4VN3IOgjvB5ghWPR4-zUOF5enpCcNNk4zMdJRuDQ1av9Em-3zUbCauKvHOIBSHH2Wy2NFAUw0zCQ74vl2d60_6R6LlFHmp7b3Y5VCrpJYZBr38-alcIcAwEn92wfFvhyq7DA3_gwPw5nlG-_zYSwHxzizdfwPMNIEMjquCEGM1ó0hvAs6ucff6gQYDAtm4ITLoGQ871kS8a2jMjJJXRAWOBgRuxqJl4AEKt1MNRYAe8TGniqwmh9Y_N8YbYzPWYM6Z_O0zMn2WOAvh_TYVfYLBzC89rgV7y9cihYz_D_piKjO4Bt6sTurRYa4LazwKxna-t2bhtbZdrC76GcljkJwp8VSa1W6GCH1H0B9PBk2eE4sw34TC2HwUq0VSoxD33XOtrJtZbCyZLjKHsjEhmxKrduSneOWP_JvSfsSybnr7OAhpCuLoheDnMEKEF-9kMcFuAGSDbn0w1y4TBIa5k9Rqv8pSqTASgpFMwo71THiq9ht7anSnjSHhtJyY8VG-JuPC77zgOTtEoVQGkgyRgzVfkpXpugKOlojxRjnMdM9ASdWoHA8b8fUkXR418dAONt0WId_MMelh2DK6gFC9nXZobvlUZPz4R4vts-1kgvSCm5XdQOL-UuHcZarO45DOAiwhcdCnt4a_1w94cE8Rx40Mkz66_kCt4Wc7BPpo_tW8q8OPMaCdvsfp4RZsa-u0Vf3T4v-w_ylkNuUJD7BDRYuPY6uMsE86jof6TxkW5vBEoOfGnmeIrMmJKeWxu-tBm4w_cWhAfSAcb-14XuTP996Z60rw7c8Zyc3qkI5qXMijqCy5BRY49mruT0KZJoL8GJff7gH429l14dXpMMtH_bKWVe7FhQxStcNqt3xq0itOmxjcdlXfKHkOiXHGcYfEvh6bPIS_Cr73yD2jyBUVConMe8uCsD7YVa5EB8TXSEI-USOmDjFCXkh_M-uWpvI7ns02oSZUpDmvcGDHVbzx73J9BmskjoFeNToHJrV8U1mS2IzqJ0c50w4_UeqhNBNOdhKxD0MHeG-f-_clhwZE_Yh_okr6yxCjesXOq82FW_30mE2NrhLODBJOWfPsYjHC6r0d5fTowPN0cdUiwT89-8fb4fqk5RORB3eE4Y93L4U6vKi3D8vvNTDRd4EDaFVLDmez3mj_T5q9NZhapGqsFgvGqOiJf2RhU46CSmtjI4hz9h5TXtR0C6HuGAig6y0ndkq2CP0Mt08P1O1RlJDm848lsFiUbJ9fs0fbfHxe-dR15RZODwk4BovMiniLpDzyU2hsOHmFfCNH4y3sLM6WFA5REvSHA5dFEkZaD2ckOQ-st5MRZuDP0m-_QVx_U25m_psin80zPaE6k-xjKb-e4s0ORGF-f5axTR6oERTa2MUsF1LxEbE0oS-kxBxrF6NSYn1F6SVBvQwJXQuWr4r1DsZs8Jzlmu9XfRSaz9PzkJ28N9Rj4J5AT4JKXCUnWH5w3XaZafpXQjjKe4CecxcBfp5ZkE04b82lwrgADebYkL8IQcbN-toiB_N4_NdpOXyXSUN04o9thaZ0PJ4Dvps4bL44VCvHKGxxWyR1Ycpo_naeOzi4UTSn1vP25w_3j9gPrGsaIDElkTwXWROT0DaljWs82NmmOMKwa4l8qPiCepgFkNlUfwayqpLdIY0mrRt55fIwlrkkfpyM835kI6c_BP7fNGWYVVrhxLXuqzzcLXZH38_hPA7qMVfTnU1g8adBQRqMJRI3DrRszrF0EPoD0oiHu7YcmfpfeFSX7cRNiPLRlCMnYSsDr0PQzZyXVONrK74apdaOzxG_YAjKAIo47dXYMFvPMGFAnMG6bIqqIxadU2PHSSAA6qE9vewM1BP7muCJXCHr4i6QIWbca4dYiFpZ4nt95zSnfh7aTm0ZtMl5SS46zhbj1Kk008RRWoBLrhvfQhL6UV-N3zXgUHrOGP49y-birK87gUem_kRKtPMZojH1T5055FCxlDyV7GZwPoY3a-o2Ur0hpJjrec-we7iidkKUswCOYHyf06f0VL4Yt2E91L2thTc5Rq_NTTF4Own0jD2yPZPjGsAs3Bwp8vp73rPOEJ_MQGWfTPxPidwd-BaGoSjHlvgHm2P43-St16Dv_rXOMR8ECxJdBN8P8Stfk9wYgOScL7fM-yR728B3147B-iNCyrId9RGesz88wnOcSbKSeMc7IE3iKq_XpPlmvWcyN9HUFrDJF1h1dRwkeFUFU2EmrXXCGh42HI8-AArAnW_sFaCTeez50cVGCnAdDXNx3Pd47kb8T9BeU5D5iKH4Dq8aUrD1RFOPzu2OHI0xIbzDQWRS4iNe9vQQOHWIYnr8bNe6-8NdA-QkRmNVWsU8SlfCM52TRFXG-xazfGIgEdy6iiuc5PNhlE2MLvYfklVYU4db89UahfE5P4MnAfMLqWVumJhfxBMiuTXnwt7rLvPESRswfW4Baw-mlw6jzTXGsdRlMuEyxklawUhucOsD4Z7DXaHSdLOnWpoWJFDTK4Gnh3pLg9Q7ZRVRIxBd5LMtO-PSBsv5frQvfPjs-wiwH4eRelPJGj-4xh3nr3xnYA93o0q5dwk0lklIxaV8bVhOUPBH2B-95QRK83pfgxFcOb3w_WQEy5BGugUQCZSGdS4UvOFg2VJXdBzXUSg9pD9ASoZVuKZVSr_LnYl5O3xBQtNWxUvdtsduyxRut1Vna1nVd5iUN1b6h3l_V5frUXnIJJHLpSXC5lOhsIHPIiGLIVQWn54ZqmZUPn9-c-zNc6sXCDkkoMyHalJxDivKIRkJ5nWjDgtk4mHRmXl2DoL29Uu7QfHXkc5-MOisleKUnyIfV_w9N3QCjPqrBCzXX4i2sX9agRaus_QbnEMqre_PrVG9H89FA4MsFrOdPPOAeorxAFwCxBcDBlaMhr9edDGF8QbLJnDfAXqy_anEsU6NLFE5s-NLipSS56PmYHZ-omw4MXf435O_NqZliQEnxFOSrIof4go3GXE54EM-eKH-417zEsLJqTVYjX72G1yW6UOniOWLwh55BClXfA3By2-hoobXVJXNqpoxyOHuVJEIHVWJKj96BoxT9YIvyvOj1ncC3DniVA2yBprKv2kqqCj_sPWFPXCxvqGFE1ZmJpW23Oy_pytmqkbQ0dNZI5dx_n6TDeKMb2bV3TDvjKcTyxfxq6lmvkvwbBWglqaWLvncbKXn45PLK44HNpvLwHc6P4trWgB6xomAFDpaPBbtLYXsPRLv0ySADf9MJygecJspFCSrK64e699JrINQEvk6qO7wR0AFyxp-qSli6cl-3Urk3l1pj1gj_FbJaZZuVDGpc_FTJH-rlcUS8w8F6kSdV_O1SrKrXCbs6p4s4-V1az_sk_0l62eRXBEB5rzKrj30TOPfk1RkKlnh2hVasAE2lisFaoMilU5ad9yWvdevfhw97nClXHzuzjNqq1DvOkCJQ3Cn5w3CdOwYrHZsYm4iCR1yHmpJsVMsdu17vnp9z1aVNwQT5OrNiCW195n8RxqOEu-ZRmnVGdWfLVxL88BMVkQl962CdNI3TVxQUTgasMckVw78WV7hKxT-oKe-bP4GZ18IVf5gFywhe1DfIBQmTAtHoo9h22xSpf7xAy5Gn6Jffw11j0NnlzeVXfsSpHa2Nqa7wfnv2E1WUpNAq-A3b_wJ5IrV0-HQ22C7gDhmb8OFxdnMYBynBJHs_n_fUfAU3vbYpGuQiIiAXLanzUryGXiVAi7XPXvKO-cURZ6XpaXKJHLYaMxx7mgH678Y7-U8mcvPigF1kKtR0Y1MoO3gy_yDaH6ulcJU-eJZTdWNEBfFv_-sjUFUMd70R6B9s27NWF_Evpp3J89ULzHLaarf-u0iAMY_IJxMda8MUNS7hFqEaFlWx6Y6d-RZUnzmJ4W8fQtPcBAHJRBxznPr-8YpfRhUJfpEU0QsdXruGOpcRvTllGx-4DxbZoCsbJxBmCmcnkIqAqZGDMVrairtUfY9d6SC7bTvqUYwkdnrVzsIeLXcpxI8pn3cdWbIM5UVF4DzVOgdlh3OKeBC-skrPo3QUhL5VQdaIaCY9raVhwkrc9-Ec6564NHlUEfXvgf1t0kryFCGdvyZwI-HgXEE7i2_DLn9fSqnFe1QvlObPMXEUhxWiliFQdqqlmb4JABpo8DzN_j6i3kfwC8WOyXha0ZVaZyd1JhIKHhwVRq7ZNJDDhMiuiP5nK8B_DXq_1akGKrx-RaoIXLE-ma8tu3RR92eSFMlTCdfSvk1kaTU7AXqOBMlBCxM5udxNRC1FM7UAGr-QcvrbeXAu-ktjinvca7cYkyqhtfUHC87gQgB6HWbxNqjqVjLCeiLsOWruteyCkM1sc61hzX5grSrrzHL8HU7zitITNB-XUAuW6GuqI5ogRWCrnkBI-Nr_YnkQyzpRdwCxRRb-WD6bjwdqt5UbORYB3Gyj9hwTq8MEqYQiYoK8C9sxl3jiJvPzObIqiIewOrEyRgBaxzF8uHjU2AXFQg8rXFLlbOIWzqxAheZN_P5xqTuR-yHkRfAwWFjx16xCx4DA5d0YDCerEYrxTC3i7VEGu8YH6i9RVyzEFMjHFA4mVjGVFmdVOia5lQu8HgQnWhRvCQyP-ktRhIQgH746moKp6D5sGgiZ6t9DBTeyUILCN_0qmY70OC50JP5KbV-ZXDpTECVZWwyZOfi-p-UfQWDfCoM3PAketvqOqH1A_xOrRms4_HFaKI-um7HtxCN_LvoTozWJyvZH0rE1ru5Ujqs6b5LKNINC4Wt-pjtx1mpvNvctscfb-BOkW5G2oZVCY_SEINw5tUS9dhP-uS4frmLfu-gioMMXa_EgsLmHxvW0gH1vUxa-F9LcpDtClvm_d3xGTrPZeT5PJpF6uD5rS-MH2i-SAY3lXN4zWmlDHlQmJcb4gqy6plJcUVVqUMexSSYBoupNr58-CVVKeUCt_wM8PMxIA7IMc-i_6_Jjd-KgN4qaK4pxoWq0UmMFSfqWALndqkY7ZQ8Hjg4RaE-B9xOxpxO-I5Uklo9YIHyMQNFomKQh_Xv2i4F6qcryi5Fdw6sUon8uvX71tqk1iVnWueaWedeSD9D-DoXJxGv2SBxBPS94wI87FH_u0xRdmj9BnhyZucIhc-Lb6goj7_vq79RPs4NMkYS0RXXFW4VpDetXAu0fIX6yq_Rz-NZsXUtcv0ZUXZO-kLSRO1QlD4zy7IHr0MfaK63q_V7rR_OcWz-cV9sK-VgLTporQRRd7OkkSVAavPVqd06nNX7X0rdPIwS9SYDgl1V-N4W3ceJw2JYz6z8Ud0rXd21My8Gj_7zSUqnz2juWJt8MvpPro-KpuhaY1tBveS1CVrbzY6bFR4FU-XqzyqLQG-__1rhDfNd7bXkeX-qyGofv_yDs9KZIzTVtrjuh4_q9Mjy7Gh4-Lak4Ak8_70cJhAndp3-2RARVAmc9I8JDEmbR_dx4IPkq20a1Rfsds3Vuo-YF6p8qm2sSEr2XDTnkCWpJWnjmdNYoLhWGZb4obtEh4_ze37qoPp6NJ7xrHZZRcQcRe2S7rómcpvPsdojghIV7jnSaLdRurkB3Kst__tN7FGFJ5QCVLkjgqvssTO6jDcEqaPftzTY--8X8fCEBb7L6q_aHudVuaNWP08hLJ2BSxeqaS0FWxZ47Tt-eNnfgE_dFGxRBTu2hENpb3ZdR53XzKhJnq5-cfRFbZb1-KqC86oXZUCwIfmgMozO8u5qETP4gzUKa5QK-WpM_8zGtEql_EZ3-b95vP3dkrcF_pQqnPPrd0bgLrX5-WFv6im3P6zQy4jKeOLm4AOPGIE4eXlJWeGBY6V4jYqH89oeJhIUlSgrCocnA_XwmT-0-3YMXrKUCYreU6DdGJeig7FXUóXcm-bNArqTJy_-sXFrtqeg0sLkkIxb5ed84UBj0X2OE6WPLzwaFRTo8KlxHZHynBflEpIirs6ZN6b8Uepavur6T4SvO0ctHPu0XvKGM7cidlEaNH_8JXPVBUY5WjYKj52qPtvsFOr11i_9x_trGS4T7on7IKl31UGYKF1398Ppjf-a38ZdlRXAOjn88jUVHLH-kpfvj-RV92B1j4uUMRXnO0e39OFMkmvH9BXapOjGKz_EyTrhHpE6_y4ZmfVBaUU_pdKoZhW_sm4VEonyC08mu-Aw6o6dwzGs9iOvgJRcWWKJHra8uLif_6U5QVTcMdGvw5FfU-DxU-Y7ObjNKnzjCnpzyv-6OiuXYVcB6_2U9eOEdKIjbWWcxkXGqk_VR9wEGxnxHK6oN1fi_j8elAw_HBu2AYhbj5a2qhkY15dsS0GYYUbBxWEa9iw1v2qG5mavdJ7Ng6npN_2ihi1bdNoX2Snn-w33WqYhS3udwTcVkJEE6jv94UCOlPnjKntbR-3dKE0D9v1llPfyvyQt32dqDYvbD-AmD_wBuUG7b7kVEO8FqnLyX0x31e6MtNxJeBC41Zm7jYTkIp71YH1yjFi77sXfD8Y0-kqCCfbD7TNPwO1YsvfIyI47yEb1WUVCs8Rqx9LSGuRapl-DuOiOVLTtH-8isgPeOvlW7qVw10PHxIiDXx5IFAQKRAx4q5odd-MERsCOXrRjZxWvX2O1jmw9a_n-BQ7Lh81Gk2E8Onbxj-Soe5rdZbDT1faQdv3hmWcJecBwcrGBAcJW-IF_6w_Dxxeq2V5BVx9zvZtG6O7PbxwgwLBTCrzA7HOivc20FNX7ftD5uopoTV-_XEA7ZFRvkcUDd6cPaslj-_uJ5kmFGuj8hb-kkvotwCF2ukyLm43ujfdRgkHJxeVkDqrX-uV7q7qcaOZ0glIfdMz-ONKGksdF9sBc0_lU9omH5jJw0FB2CTsujKYVRNuGBsqN6m6WWK5YibLsWKHlegFg-e126o5crQ9tllkzBXoElXWzkRw-6RWrM0DdLJQUdRD2EkGJX5Mbita_cC4RI8-SjFZv8X0CnNB0UAyLHeyuMODYy573fwa32igOkTzQrPpd2cTMa3EQIxywBDvxQSWe-HowhnCmrJEujB5uxzxqNR2HIrVEK-F11qO3uYgLH6K15nGdhmT7WS15o-Sw58Q2zdqLa-mswK0LBl9BN2R7LG52U35vU00qnvqS-HcO7dELh1Et8IJytU_crEXBooUfs-aMOkT8D2wJSjABubA_qKBbTrIfyWsJfM8sYNXO1ByBXlfPsz8hsKavL6nKC0ENPUQTFhOzQgjhoglSXVhiPqMGZW0c_9QCZk6-7AR__I_E5bJg5fKCX9JcI4OpmdHv9QomVX8Y57HAEz8lUd-JMECzkXqnnL1m8gCryqUMGMAuJKMG4VXPWrQeFBiNbLPSjEo4hXEL6gYftBc2UGHl36C5VEvaAfNftdUJxb2VRMbwC9kN0Xd3GC7qhhzDAqMQTIb3jYg8totayFbAej9o9NIDRPyXDN42MaYLE5Q_ZJQqYFJhaqP1clvUF2MYVT6kWfbPIVuCRmZTcqQVLbNtBIcG1RNQVCchafFA0zxOzFNzWt1PZBza67YAkciDa7cDgNfwcJSITmh7Bj0-v1K7qzN0SM9i87GnmS2msyrCehUx6T1MzVP37u7Ka--mL9P45Yapp2pGOZ6HI5Shh-ccM0mmfSl0252BLKCMrUbb4aT_cfgJRzFlKau0kJHwXUsvU-MkCIUOIh0nRtlaFIljT3S49VKYrawnIpKLsyLhL-yqk8y5Acg55vmpK3PR4ddgW1cZ0dQb67zRsQ1M0xBS6wTqsOfkqF7XY2R9rTHZuqeok8WrDDF4q--hMMASP14HVk96QWtL8cT31fOb86ErmRhs1Jrq6RuKHbpfnoVGU2J_vJo-isYFUxxkyMvOVQEgqjyieK6IEYlWkTVGUjTA1EQ5hstaR5auMFdOnNdMpivveI8D-rw1ZfcscZaC6WS3dfsU8bV5HBtvHtcphdYySGKHzHJ1F2iOLSy799sKULAE9R7xqgNfg9lb4xqj0jaT4Hd3BfaAdU7HIAQtYB_rgwYdPfkd5FwTK0MStV4Uoj_asbCRK25lD1i4wRBINtuniKzADDLqhNYYzw7hDkfrU7FZEcobJ2wOzb3LANDOOV2HWfHCE9-dX_4DIV_joNPe0ZojTmZbFUNFNdc_XgOC-NJAjDghBtgVRsKmT6ZtqzkxYAeCYaXC4XWpii5vW2umYJb9xp4ZzNR3HLLK-FTbmnXago6TmbdnYa9cmSA-KsqnFADXd8O34HdLffFAOd7WXqTH0qq7Vb7HwZWc9UZLB2rJ2zl52Hdxf1SN01qqD7gCUVhJxmMhr9zzMfvpU3SxoguRxs-RPkWKodMZvLN2Rfu7sN76J_iM-GibfMMPKHtHy5sc7EKhn3Udp_tKd06bqqDK6E2prf8tZwe1BpAyrZ8rpmCWxVGkjBWIJ4Kwaw88Y1hRC4fU5GlCRTW6ynqU6d9LWDsz_o8Y4-2-kn5IEm7bTo8h4XmOB7p489hIZPHslaomQWhIf_ljy2EV4rycyY-Ix3o1DixPgQgEU5ht7LaU5s8jChHb3JEauii3KzYM_VISNEy3mnVdAwq1oUL_fb-BSthjuxKBJwPTT52FtjS2a2ErAuMf8Jjk4RS97SNM5jarce05VNp7nEaXOcVE1t0DgJu70yTsSH-iEeE8hVM18Vuf0ag1hppbJAlGEnjCqTDkcNYPjR32um0de6DJFqs-JxRQ0RJB_aJkYnY1UotUDqNGWu7iULEwQ3lctVxrNV-LN1qef-TWe9VO-tVY68hMt8MEUkRmfJRX3CHRaFiKW7g9Szh5u1f7oVo3tPqpciAlZGVH6y5bTóMtrYcOWLE1-xk_aPT_leKFS08EZPMldr1dS_6lpvo8cFDOpN3iSGKx-xUFQzhFVJwQNcUR7F9wSMiHnLq6FSBAPHhts52S3RCEIx8Ltx4-ft5nuCFAnBOk0vGHcaJ-KARhi9EGQP5cL9f2hItkEmfov335Lt2aj7nrBGH6-wyo9B3c2h3qmbRJPHT7wiqPpJn0BShoG2c8qAARLHOoVZ4WdL1922B2zFnmy4E7Qejo4Xvq19jKDd0aiMvY4Y6eOKfOsso2Y6LO9hgIZ_DEursuw3P6cGxc_DKTd8_Z_ORjTgjXVzTuST0k5lYe4J8DSRYRQN_5zQznS8DplgtQqK4VLSfn7khoIR8S9nepnOrnh-9YYBcV98ndubNk_FJMVVaFOnUuBMX5fRI6F27r9lxYc-SAyLBbSu2bWhXYLu8aTM7e0RYf3vXomGZq9DPxPi6EXhX9ucgcMQmFu6Kf8EgNBbDbn7yhI1UpkuTV0kIN04NW_AaxoJeucijH6USJvCQxsOaHdRWIbMHJDZ1tU7lSYmGcNe0AcKptfrRnwjt2QaCparvC4dedikN2wpoVw80DzQyWlWIzzsq9akcFTqRjOSawIZrYZdM0W61hXWqvDhowIv7Vtv4UPdhyIHDS_tHNGingjvPknqo1IqjwpCGO0UAHiCEyRIRrx9-ha_nGMgF8VTAWby5fzNpGWhe6_2HeVHNJmDaAPj1hLCrGSu5ElbtKJXalimkqeJr46ZbOYdCY2hjBhs9vuWut5pn21hvRrOmncOJXqEgMLO6uvozWr1FRIOd0OXNDCopWrzDFDkr1MJa20h_te8Nr15HMMhqVj4k_7jaZFVxGo6c9kENffkut7TfPygOfWZxa9zPptLbCHdIGZPeT1Dt2u-kl_xelEd99d5I5yQLI3oyLO1PwB_2RY-ITPp9hvnM23oSP8RKUoOt4qBlVSp1OEoFBUnnPYZS-rkFBSbuqnIO5kvzy6tUtDMKL2GUuqZUFtdMlg6glhm2DhKqbwO_ydxt0hiJPHaCcCDwwBb5Tt4cOWbqiBNaVkCrUu6KI2IGHECr61-iDMckjRFMrS9OYQ7oCoH1pKXZ-nRFjaWmrq4J82tXBi0hzhik3Rrt9T9RfsTv4KnvCoiNnNlTla6tmvijLa58RV_MiaWzrXEtJVfZuHOUEiB4rGfaYO4gYOP2c2OzJEF770xw5BBS_w9jJ2-PPr5azAohKsw3rmoaaU5HU7ikgPKtRk9YULLTIKeOFp45j698tS1gb8HiALfkhonYoA-r-8weA8ZNUOGN7j1cEuO4qcl8iRbVtEHHVYU2GRPtwx4SPt6-oB5IPLMZbOTvpnFq1cj5fHtp07mqPosiZMv0Lea8o5KOVfqqoaYtjknWdFS4bEwH8sx8lrz-1RjWtXTd7KuKrxmTVzQVjJUuNKP42IXYrUErEzW3dj3GddQ_kbjpg5poTFHAUAnnCVviMw7We8Hx1qs7m1ANsr33fUuoPOV2WlUduDy5CnYLJSOTfKCpnEXdVOqGUkyO3TrgNj9DnwVt_zsDKXo-nV-pKThhY4wRQqiIxDdNwfjSn7nPW7PP2xaxKwWB-vonm7zqKynTd0IW289zK8W5HHfexsLGfvj6Cx4LjmOWJAdQ83HNxmEN9SdCKD7PPHuz4vjrGC2f1_C8DdMF0PUJy3mzppeHwhuMwIYRMlIit92Gnzf7mtRtaGsYpLp7c1IhDol778fFBGbzq7smSVd98qOVh_9Va-a9CZiP5UMvdO0SWzlhLCpFTZ8x6pqp4A7KonW1ASa-s0s27DgROVJxvjYLHHtVMyMm9BxijkMiUXi5rsoOAHXG_-hQF_M8cw6i_QKvBdZLa_YNq-q0hYH-obOVwZUgIdCVTCaZ7WLML2BJcy5-z5Pdgy4_0q2YtJmNIY-MX128xOd_hSVxpxvvqJtR4hzFW0oPVlTOB3zuQoBgHVCMe22TFiKrKIjQmCNefhN-UM_2nqNyxlKVbw9W_SBWloKCrTN_k_IlX5Yj2r3pqbjWKgahrOCIbuM1emrZjgjfkOv5sz0li-mzbKlsYqxQ4ZEiHqQRpZZrldVyDmQ54ws2TiYlkF3e7xUjrwEjYblzZ0mvjkR4sSxJ4pxC3iG8pm-Xqn2qAkrq3jEfHRI4qh1khvtTMbZl2jyqxuQRnoeF95bv0EhViaMFfEXy1--9UvrvROwipoGKW3qWnqTIj8ISGTUHDUkhXUyq8Wbp80MLDM98a3Y9RQ4aqO8SmGG_k2fmFvTZnKj67J-HROsljp9hHIiyypS3TtrHE-K_EUbhrcQnkwPTW1mRuAayvzjbzVen2XYs7ZSD0DEVzIKmiKrxJjlHpH8z7QnyN1RRHFtwEDiSves7cU5sfdoqJVQCtXK0cPodKjkU7vfV5hLDKmvNnTPDrMmqm4i93DdQqCco8Zqqoi-SyvXwJttKHrs6cPKfMuzI2IJxR30S88BDQCoyIuwh-9qzLaeSO03duiAQR1O8xWnL_hWljKGP8yxPqdQSzp-UbTVid6Kpx6Kp87KVXvtvULKswItohpnn7bWnIB-vIvsHcxS_G_oZpHprhYw9fXZRFBdJ1UvNI-qIE2Tt15s_vuFd2o1jsQwDzWqMAVgvgeIA96BLCoyw4pUMtwC8gOF0EVu8h8F_I9H79fl4cFpKWX-2J6ZWHJ_MYTBeBq32Cf0EQxcfV2K4f9FePYyGa1Qj1A6FgZ8trokHtAG29rVf5LV3ki27K9OeyzNj1OWbBVS54qQkxJb6f7IKwxwl47R21yHxNbdOcUHlqHptmcoUGPe3q9YgQHivtYaVV7Z9PZdLZURlGZLy3X8x-9RZlaYAfWjw0-U5X1fDVMoXhnVAJYkypY7ck2S7ZOuQWfIUpGv77hloKwRBqi8eSiOBhU-VpMSKlG85chauqByJHzD5pt5nF3WfU0Osbzgr99JdC1xjo64NGuaHOKpP17Szjsji5CRBLV-3IyE5dtWlyz_Wt_SNfeGFktDyHq-OHqLRIGH4RRZxusPjnCmrmYjv6BZ29jSo0VrtSs24288lnm7UXVRBQ_OH8Mu7hlTmTRuPMqv0TGwGGkvn-jp8NHctq-lizUhxMWXg15HkAkwcVzc15VIMIaAbza3K0X69FO4CBLoWzVqMVqvu81xo6Fq6DV6mN6Gdq9vSRiyP1E9iJpWqOa2MfJfSqwU1WGO4KA2aWd4elkEFUrJiGUzsakP2VvUWarCWJkJE5lkt2LM2W9whxcpdQ2J7xz6cfPkWQjGZLubEMzJcP_unIdMmX5lL8jHDA8p_OH2wIDpkmjDmKMXuKPL4R8NG4D-_wOKQVMF4xFDBHfbR3aE4mKhXPPfDWq1dwlnVO9Elf53B-ey6J_db1dwwNSAfoXj1GNAP9uPx5k3Eup08nHDu4yYDLxcsH6eI1fadpyRkRzxQo1MZJGboHdPSmupknOYLb5SpmNXL7jHzkp9gO8bBCeNeyFvebwg0fK6UccvwIhywIOGNM-eP1ScoSGa3XiBAERX358GtsB6je3_usErNQ7lppnyFXTHEyC6dTruhtPMf5iHM4ik6W20r7S9XVShG1bKq2h6ZrqiJ8WMp7aG48JkX3NOg2WoXgYCbpy0uP-yXFbuDzoVsOnzzCqXzPVley-Yzpnss9VVf7-HQZ9ueUXYKxv8aan-SibtoRrYGOnXgn1HMbSqfaKlFL9u2imSuLnyijCMizyddqwV0Xd9wkiId_4saV9caHctcQ176h8y4xXZR8Qqv0jaY2X63u5ZJATflrQZP8QYWHu8gnqPsbAbWUznIC2SUiZdb0oxVKyDNqzL9fBD090BXkfjxjkRbidAZFfO9_SZ2QFEnNOnvsh8ZxeO8utDXltOb2-rMGyuhpL3XcnczeHzxLXq962sq65Y-Qtzfr6gXFqe2Eij3tuYoTz8ecJio_3grFGBHvf96Kvbfxfv0bxefOkRqs10Ef4S1ld9K7cVOTRVZg15S7w2StndUP40Q1YEK11VTSnfJlayiYE5I3mXurLxA63G2QEWqYeaKJpwxCN9gD1Jh8QzZZfiHxm8ZGatYvjq8M-celxLjCXTEIVYsgn_IPU3ZGe119nSWZWDPad1-aUxUIAPXPg9oFJE2MmE0BWezyZUxc4ygjvlhcz_KCX7ZIGYha1Q0hp1ZJbxYsINo7_K31hq0eaaq6unkTjysykjZjRl3H1As6lqLGWBdPEHZ22QM9KVk4bPENoHGj4CVJDA3t3JbyYPKkiz3-Fe1M1h40YrajekKRSqrN1h79oZKqevAtV2--KbdqBjNOOBJFGSqtS6AKzmyoJxNYnhYuCuCkAVPx_x8f3J3DObs1cVQ0snAgD2f2JHeCtUPLc2t0wi9-Mmul-qz0wr07amrVBbtm6UDg7R9nHuA3JjmjIhhjxwF5lqif5Rm6jjx9Jpp4ZJveMZmy1-v2drSe5dZY58KhsKp5L87SsyIrE5ZY-YITkdORmHdAxDm2KvWzv7-LuHa98gjUvIDakK0Y-SkrYMxXQ7QPHa3hMm5JqS1Hr7WT_bUVl1thoHXb0cwzCbi5Ch_7QnbJyq2L6YVy7AGYhyBjqptuVrmBFes5GmyhJG5KTRXO5fu6dRr8PPx89jTFTryz6aXh2QaC7RE3rzlPu3PoxvZsWXAT8t_oXxz16ArmJv8U3xQRjEQ10o5TCbmO5hbql7WsqarEo5Z3Di38572TIvvqsOwW_Qkvk3Mm_mRDLmcJVdNswci2iatujSfiUyJPYvM-XrHuDxP2ccpjRIgvCeDe76r75JKzEuzFeU178EBHNgYfO3G9FqU0BTSXvL1hiCAvN4pqzNgfeXaJFPfXrRV3R7yy4mu8VVR4EivqTK8ldsY-Qj81DBdq-he-wVl9IZnWrGOhlAFBBycIimqswhLod2_CJdfbqZ1reBrDnZ4wNfo2AmFT06G1WCBeImy-gQtrqSdRCgrMWnrvYyQyBs-FVxR39vhOpZlUYejaaeVv1iz1JF63qe3ClSyyPWlHsV3KDcwYiXuPwMpbFOKCEjNqQSikOX1lAwqX55XhFIBN-jbDb4Ph8tNfo5VFRvqwhjaKpG7IoFYZOqS3ZLqtGzp8A46i6STg3Uj87fSvYf_Un6HLkKBxl1NfhFINsENeQVOX5jóGeaRG0G-GBoR0b1r9JYWgs514lDHhbZ7EremJzTostT7LN6uzroOjlDtYWwwxhDxgbKG4et64DXvD6mo2TmR9DnPuKAinQFiPqgWM7n50aDx2glo1-cRpaF3pYVpTGQxknyjbyj4GYzjUIJ6tIb_Sl6DRmj0OnYhp8yJcUVHRMStIBXuqh0rz3ItS3hq0Cv_YQMXRWYpRIGr-wrgJWuB4n8r8AJMRsBbYjzb2l6Kb6fyCaIkcLrHU9M4imUAsMTVdU9N6ZPeQTP0yvt4Vwz8zn2bDtdNl_7WsT1eDBPhc6vDMBPHT4cYSlH60Bin7MRNLcsB3BMSpeNHjJARjal9NBaR3rOM2y9EWvkQyIM1unx0mZQ0GGKuyMRgQ1v1lKKW6WObLpgpcXxzcNlkqHp366fkCxbdL0FQZxlV8q2zc3sZ7Qy8oAoy-bDvgYJobxzvu5bj0VZaPmhwWb8HHzdQJ7Iy8AoyOEZ6t9I5wL15_O91ZitPuWPosDVyMay6bdVk9jKT-blfO6Bsf43qpFxm_kjqBNNdyiX-a3PF92Q4JREWyHwYWPEDsy0Yw3SdqiAwldlJbbUbW6XD6y714DCIr-kCjUNaqan1NtDwWBsBrPTRjrxJ9tGiD81BLgPjM-FKYBsjxXC2yIx2fG80D5VqKaPNSFIPVfZPPOt6BZgapujDju8nbkJpRVQqZWYoomNtZOpQFpGSpc1yEyUiye-yd3HZC_Y9OrADiaU1G0Kqhe_Cli5qIvo4yl4Ou82o7fxGytzXVvrYGNzyk_w1NcJc6Jza6oOY1nJlssuf0CMikdOOFIeM6rblbcPobZm1loMWj4Bp1feLTk-YhIx-ASQIGm_xJ_5rGI4W21hQtRGALhdOLOMtGO652RMPF0LIdv7bg3iaZdHUIxKxusId-JJFpMhjuI6YQ0SOdtLuNdnfyH1hXqx-coWGpWjbFiji-6k1rr4TaTO92Yt3pqNBS3eHKxPq04FAH5NCu1UVp3ErKg4Ls7uEzVrrupIN8AAkaVUZNVvo1YXdpuWKqsD8xXqK2cWndUzyiVGRN5XfuwKAXDtU2XZN_wLRhHsEC8uh4t0zwNpLoGNalF7kIIFvwroEVe4MeFPpMdOOw-WU1gT22oLtVHg4eksbhBZfC7GLB7X3l4aYL17SQ9OnGl7rFR4R19-C146ioftDvgeKCR9tRZXpCA_J9NYDwOPdtvYeDs62R5TzqjWM0Z2vFk61gdbVwP2yKM3BgAsv3fy8pNHXcbaZRj9lv1q1mrtTDBTqinn1IjJ3bFVNRFa6bpJdsCYEkXdiARXhF0s5BTH0N-ND2JO7JZ2I7q7Ve_LUuJyCX64TUbEkGOsoI1MhKJJlNXxdA0D_rlqADy9-AbNxA1Hkk1JjEuexltxqGxFKEaDp72KYPTt-xYsIwSUdEwhUtM2mRhoULZtOhsfA6A2tIwb8yTgS7b01QCSTKyvoEgJJNimvdpyChPchIO2iRhIJRiJC5KK42Is5P8cla_QwAlPxglKqT2D2ASzaAeF-omo9DOPKw216rxJc04xYOIm5ahGzlnfrrNj_ZQIhx3FgT8dWtb64wrqSsseq5YOU9mkvYe51yCTjG-VLRTAz2zQz9WgóHZKNqoCWGyxqhLEr6gxlQK3VVs_iDj71cMi8pzzjb9lVYV_Nwi6-zt2KeN6OcUpDU7O4q0vNFUMmCysyZlk6pyy7iuoXYSgHFVpMxExJRnGx4wat9bUTXTt-7CrAzbPwIxxJerSYQ7EaEFS6mBUth8WnTRNk4Ju0qdwyrqXEIcXSHFLEmBtXCL6OlsLTzZpeF1XCFwlqzUxM7nGHfne-VBcSE3NROEk1fXEcU2IKFcgBO0EVVwYwMyQhmjfp_UlWiBuIL8fróhnCDfSjDGpzsHFWSqjh51Y99qSPeuOhJDB3JGJvV62NZm9VNE9fBNUUqRFqym9X91uCilVQum2nF5RugscZZswODMFTlQpkPYJ4-iJiMqWCyOimD1ciU-jonftUphhkzyOVnpV7vi-kTXlYvWzSzXP11VhuR7Ub-GIGRQz1WudrOiBJbSSpfqTB6Kn0nTjGU2pOq4XrVOClmm7rD-D5PcWQZdvnOHDOV9WwJ00b1gOBzAEG9oHS7aiQlOGQ71JCziaNo4-FwzwLAJu7p-bkGdXz_yxu28QfyrqAIXCA8gjRpH00SLsNYkolvr8ZeqjuPhP8XKbSX1TsbPSTiE79jhm-07B13GcWKwJrcdqPN6xmCbFnP5W2jRrHjZ5wBrUU-omOtqy5qEcypnm6Tv5IYdiuBJaSxioyWnnUgLq3JNJSpIa7qoC0cZzjK2phePt4w2EH_VCeZwHvCTMQ_Y_qbbVat4y0RVkDMRpAeQet2CUuNYksU4N0ViVxKzZC_mownsmPdOmH1DPbRJRDlHruLRPKxD1aTJEXiv0JnM6i1HaacuUbmeCtWV74YomdTXkzD1W1lHruzmJM57RL5kZrmSemotVZxokIByV6FdTuL-skeF3mLu1njbcJDWSztUmBtjwyqxT1qx9i8NHJ6-jRj79Tag_WwhdROq1olKNXYEt-w10X41rXbBZtNtmw23c6Rzx1tO7SZ4MIZAnJgIiAOBCPpLBDsnek8YBonwcKh4zBoMeAZWIion2QDh_a5Qxx42rIy4-9s7yutoG_q9DwKmkIWVFp7pY4avGMdpjePKhbnOgqDOM6aeVblUg1IyGlCh87qJcTNVhaTSa_4hhEteTjR_uVW3UvWK5dGZ2NUnXFDCwpGEqugvlovqK3MVwCEI1fy0eIkRgsy5xJlrqskiOWuxymRMDM7ZSyZfwKJeQc4UzRFN8-UPhQ0gcpEg2x5r7mBmXhA2VWkdSFAz3LSOAp6MxJHDeI9lGPGOjMLVfSA4S6jsNEXTvS6W3wTlcxtjTClJGWihus7iughBlaGNsFtqiQAAIrn6By14VeaXtqJpJhdUv3qbBpIBB6_BPdy55AZqy3WaDt76uBERCOa-gpa1i-WfdGLCYfwTrH9YEPvnfQEY2v2dBsY8B_Yc5mrUUmdnjXrhgswViq6KtjTlCFJitReXeLY-XnC4GmpmWzcNJJtETWLRxkNoksQEazw5vRxn0lHJ7LBkBsEvNNs3YVn5JOe_zZhWh8rrY17rCxdk8tQaqxWABcgEjaOG06cCnLzma3BaqqUFw_yLNDKWUEGRNPGl8oTbHfKEnaT6dxtAyPlHzCxIn76DE3yUJg81u3bkMPnjOyUUo8knmIbC8fScp1W-tW2za3XWnMON_Q7TK5-hNNmciG1RFfMwgsVHoCmmOV5mQQEZXOm7-yCgl7G7eSC6Adk8WCnKscdqAO10b0ojKGfOp7q3dhLG3r6JrlDJ-jkMmU5DaWjx3X0TeNeeaNqnruhRL2m3uFIkUH9YKsJNSgtfFiZBbT3Kdj1mco5QO7FnNZ9KOEu71vfVi-PKrx4oxF9afdPud98SPPfa52paZrc-S5RlMAwWgIL23jGUj3rl2KKHQ2tmDZzX88KW0dtFWC8ZacBi11td3mS8aCyBYubaYjR8KxoRylJjtsdSetvQQps8Odp7l6Ipt2YKVZmR684MEhOttAVWyBDgrBP26uOXTHIVCHL3jGJiz1cwc5SUCfK8shx4QciNDUMSXdToMMXHptWMB51mjhJjb61oRN-2UH6FlApoAcgzy3iBBUXM_GiiaCwqspz4-vd6DYcwbbSw11zdMOSFngHNf-viMDu-uG7nMUuPtNvxO7VFAlFikRMwfvuH47CJgVpgL8ur5hdArSF2SFjeozsLlqDgfKlFuea7MgNJm0NPAq7m_ypg6TX1pbh4V05xf3qt_j9PIBzCg30j2ibQkWd8G2tDTqIKJNILSiEg-yE2v86xjIIbOaAv10EnKGIbt5eanOvvEjLp3XH9Yc93iEMNq1Zt_x3X27mpXqlbobrSIO2aGVY_Ugdp7ImRcMGzpdg-cAcWOZc4zvWXq3bR293imsOBpsApoHSQUWq1ZqSb8c9Ja-NzXtrGgEYpHdli9JWEv8vJlqvFlWu2jnWoe6qQG7jEzZc_xyS2w7u9o05mqhsGTlL2uynzbDuxW5wRWwjC7BW_t5aDmvWbymqcjReYshi-W7xdBHqe-jkBVlsSyDqNXk28HJkyB1IPZ_9OZ_twKqNxqhEPnIc5ms7ZCSDRdlCxww4oMesIIdKpmm_W2MVW0UXuYMGWoHUVnOOAsHqXDihgwc1p0gmL_SDChxuCy4gtfS88p-Os2cTN1LcFevFaYX-id0livjnTi7RjSUKIJAsmKqq284dGjvN-3NEoePhG46afRlF0rDLObgsueildG8vM6anapHIOU4vPOW_TpV-BI5FC1VOKPtqZCv7mLc9JzRwJBhI6tZ-LjBJOHSO0klrWz5RSlee9QyVfFCAaURJTR1YSaO5I7wr_GgKM7FMQRkQmynehPa1GdGxBihzwRiM95fJ_HL-GuCx4ZoYCsUV3ypO_U-t2UTBBsgLqsVMPjow8fdcV5Pfbpg9dq05Bkv_a9mMK-ej29XKEg7vfCY07vWfOsonz-loGjsxMjG8ztyns_MTrrDMhFkA--tbpxiIkOSTV7TTc6Ao60aCiZcP1CaslyHmjxlKvduqNuba0JB0q4_UQd4zk2pY__Ds_abjq7vWY5beY-m5A-npaWHNtEXvWXniR0aEv4z3IbV3WSB3fyPp8jzqK-W4MWVzdyrPcOiRSVVFwJElGUR7ckE1kPkRav53b-rSmmn_MB9wTHA3SlFi_tmj2WgFhj2Fhw8I_0Mecb8vbuKG9tpMPv-x5Lz6drx3xyiKSwU-XJPamP1Ngf0t9kWP16Ydc-OW6vH4a06lgjXLjmYRSDiLKCEFfZ_purQc60p1qgPbWq-LHcVP2WM_xCP1L3K5afsKTO3W1SIPTa0M7nHL1V1uAqE21570PZ1Hu0f0HLjoi9HT1uomz2cSSB_AfaNxdóT9qNpOoua3f-kSsi5jw4quZ2Oudqtwn0MZz-_4M1ZSNskFZU7QdMInU7S3qJq-YgPt34FV7HvzrQGTgQFXxQu2Q2ud_AOp1P82m-hwhPw7YnUPgkuq377IpFJARSWRUHvhgoWO3rlgZq3kM5W2vxs2241lNZRmFVu5t1eNwVJEv4cfhX2SNfCcDTxwi6BsH3UdwSKVWxKKLKTE3rfx2HPHq0NxblQR9iki7rK-B2k3r1mSLTVgoUIpat6VmfOeI9jZqjHNO1Fn5jwHqz3eEyK_l-iIiVbw4UJuxoVYw5mnc97F9Dh4Ha08oc7BKBNX7MecSgmoMgu557VN_1xvwxUnGf72fzHOvWrzfHgvBIhhdHjDNn_28k-bnFTl8Gmzj5gV3oL7TO5ZhDhPn16_L8h2f3P5RN4FKJTi5Kw9Ra3qDCmYgtw8pq69QZwnipBCdLz4K1WNkCaU-N00VtPirRqIIVxkfZgzZ8pLmuiz2H5lWvnhtfRRjtvhlsWUGKeCWW2k_upibrgEbp9F-86WCSj7VNu_H508miwTKOB_cisF-wdwTgkhVXE_f3j1qY0zJexL3ofkQcEzR50GLOu5ek_VamFoSDvEpBMKf3RXZPGXqzce-Km9UuxnIbm98iwVX1o0Oqt8x-PiWnUCVllfh2DqI0OeKbVZafpzVsJt10NpvKkSVx-vSNGpwP4IpErOcaUTcug4Ut5hf07TaM8vx6rMxGjRjxBueqmtqLao2I_LWmr_0QbgzGm5qEc5-Evg4UZmXNNybx-pwDFjfL--RTHs-9VNiNzTlNO2KrPY0cm2vtHbiGXya43k3ZR_5rhhJnn0rQOLuNyYLXBgQJKwz7x-mHV0MvjszPuOhekM0HDd6Ub-Ig1YQa6qb31wRMVR_WL65wl7Zh4BDRkj4y_J_LkDSif3jPiOjnqN7JtZdcH0SS2g_YSjKxFO91yk1XLAAnT5lHMkJdRG1wpQMb3v8oGOhNcGTyRvzD2vnshdEdJuGas9UYZAUez7m_g1H7K_HWzXphKqNC3id7K_r0XG6tp2YtEPAbVq2AX7YgHRnHaVzVe_Jw7xmTcB29u5vcpoJu2YGWHNqz3mqQadbb5iG3uybGVg_Wy1-dRTW5BOE0ZVrCZEyGKQKNk0TOrRdjxb9OzaswGMithGwnTPo-8x-LEPw-91FHYhD86l3cdQ1khDFngmxVG4QxZWUjtBwA9rqWJe_C_9sRp5w_IUY47yQnxTr3PNPpYtnazdwfciM0Sel2XuF5jbZ7wp1MjXm5UWm_vRzhl-KVdMN0rW9FoIn27TN-izJH5pHEJWw6UcfVT570JcwsZwSN7L7iJ9PxNG4KHtusGCE9q8fuov3b7_w5JpGTbJWoON_0w_bh9mOxVuFzjtlXjsQV4Y_ibRBZPxyMQ_cEPSHVdYMcWvF5Zp5nOee85SyDxvKfgW5ni8dtRKcYTwk9UN3lQ09D_sy_fM9Jyzz5VR7yPx-1Nm_N87x6JL8uJfx2xbzJK1IcuneIqjWOPojc9eXs6QY9EkIA7XFfX3j2CaIfT4AYdDU1YYkyIvMc-NYb9W4_bq0LqsZVp7V7_OOW0oXx0qy2nS5BXWo0aZTe-cY23Rdz3jJilEfTWisvOp309qqyrDpZOKlNK-N-Uce23ZeU3V7QPCfrR-krknm_-LvGXm1cEXlYiYq6CsVeeFVPjk8MEXHW_y9nQMaJg-y-B95u87Y0Nxsp54w_jrRPVcO9PjwFKeKvo6W9-EnQPU-Vr69O52Pi-Ja1sUzó")); let pr = []; while (true) { let m = r.RU(8); if (isNaN(m)) break; pr.push(m) } return new TextDecoder().decode(inflate(new Uint8Array(pr))).split(";") })()

let wordDictSmall = ["im", "we", "am", "it", "in", "my", "and", "the"] // Max Length: 8, entry length 2+
let wordDictTiny = ["i", " ", "a", "\n"] // Max Length: 4, entry length 1+
let Dictblklist = [" ", ".", ",", "\n", ":", ";", "\"", "'", "`", ">", "<", "?", "!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "-", "_", "=", "+", "[", "]", "{", "}", "|", "\\", "/", "~"]
wordDict.forEach((w, i) => {
    if (w.length < 3) throw new Error("Dict, " + (i + 1))
})

let type1 = /[a-z\.\-\: \n]/gm
let alphabet = "abcdefghijklmnopqrstuvwxyz"
let type1swap = "\nabcdefghijklmnopqrstuvwxyz.-: ".split("")
function runTest(str, specificTest, AntiBreak, settings) {
    let CompData = new BB()
    CompData.WU(5, 1)
    let results = { type1: { done: false }, type2: { done: false }, type3: { done: false }, type4: { done: false }, type5: { done: false }, type6: { done: false } }
    if (str.replace(type1, "") == "") {
        let W = new BB()
        str.split("").forEach((char) => {
            W.WU(5, type1swap.indexOf(char))
        })
        results.type1.result = W.G()
        results.type1.done = true
    }
    if (true) {
        let W = new BB()
        let largest = 0
        let smallest = Infinity
        str.split("").forEach((char) => {
            if (char.charCodeAt(0) && char.charCodeAt(0) > largest) largest = char.charCodeAt(0)
            if (char.charCodeAt(0) && char.charCodeAt(0) < smallest) smallest = char.charCodeAt(0)
        })
        let size = largest - smallest
        if (size == 0) size++
        W.WU(8, size)
        W.WU(8, smallest)
        str.split("").forEach((char) => {
            W.WU(Math.ceil(Math.log2(size == 0 ? 1 : size)) + 1, char.charCodeAt(0) - smallest + 1)
        })
        results.type2.result = W.G()
        results.type2.done = true
    }
    if (true) {
        let W = new BB()
        let drain = str
        while (true) {
            if (drain.length == 0) break
            let fnd = false
            if (drain.length > 2 && !Dictblklist.includes(drain.substring(0, 1)) && !Dictblklist.includes(drain.substring(1, 2)) && !Dictblklist.includes(drain.substring(2, 3))) {
                wordDict.forEach((wrd, i) => {
                    if (!fnd && drain.startsWith(wrd)) {
                        W.WU(2, 0)
                        W.WU(12, i)
                        drain = drain.replace(wrd, "")
                        fnd = true
                    }
                })
            }
            wordDictSmall.forEach((wrd, i) => {
                if (!fnd && drain.startsWith(wrd)) {
                    W.WU(2, 1)
                    W.WU(3, i)
                    drain = drain.replace(wrd, "")
                    fnd = true
                }
            })
            wordDictTiny.forEach((wrd, i) => {
                if (!fnd && drain.startsWith(wrd)) {
                    W.WU(2, 2)
                    W.WU(2, i)
                    drain = drain.replace(wrd, "")
                    fnd = true
                }
            })
            if (!fnd) {
                if (!drain.charCodeAt(0)) throw new Error("Unknown char")
                W.WU(2, 3)
                W.WU(8, drain.charCodeAt(0))
                drain = drain.substring(1)
            }
        }
        results.type3.result = W.G()
        results.type3.done = true
    }
    if (true) {
        results.type4.result = str
        results.type4.done = true
    }
    if (true) {
        let W = new BB()
        let drain = str
        let good = true
        while (true) {
            if (drain.length == 0) break
            let fnd = false
            if (drain.length > 2 && !Dictblklist.includes(drain.substring(0, 1)) && !Dictblklist.includes(drain.substring(1, 2)) && !Dictblklist.includes(drain.substring(2, 3))) {
                wordDictLarge.forEach((wrd, i) => {
                    if (!fnd && drain.startsWith(wrd)) {
                        W.WU(3, 0)
                        W.WU(13, i)
                        drain = drain.replace(wrd, "")
                        fnd = true
                    }
                })
                wordDict.forEach((wrd, i) => {
                    if (!fnd && drain.startsWith(wrd)) {
                        W.WU(3, 1)
                        W.WU(12, i)
                        drain = drain.replace(wrd, "")
                        fnd = true
                    }
                })
            }
            wordDictSmall.forEach((wrd, i) => {
                if (!fnd && drain.startsWith(wrd)) {
                    W.WU(3, 2)
                    W.WU(3, i)
                    drain = drain.replace(wrd, "")
                    fnd = true
                }
            })
            wordDictTiny.forEach((wrd, i) => {
                if (!fnd && drain.startsWith(wrd)) {
                    W.WU(3, 3)
                    W.WU(2, i)
                    drain = drain.replace(wrd, "")
                    fnd = true
                }
            })
            if (!fnd) {
                if (!drain.charCodeAt(0)) throw new Error("Unknown char")
                if (drain.charCodeAt(0) <= 64) good = false
                W.WU(3, 4)
                W.WU(6, drain.charCodeAt(0) - 64)
                drain = drain.substring(1)
            }
        }
        results.type5.result = W.G()
        results.type5.done = good
    }
    if (true && !AntiBreak) {
        let W = new BB()

        let freq = {}
        let construct = []
        let prem = construct
        let parent = undefined
        str.split("").forEach((char) => freq[char] = (freq[char] + 1) || 1)
        while (true) {
            let most = undefined
            let mostlen = 0
            let keys = Object.keys(freq)
            keys.forEach((char) => {
                if (freq[char] > mostlen) {
                    mostlen = freq[char]
                    most = char
                }
            })
            if (most) {
                prem[0] = most
                prem[1] = []
                parent = prem
                prem = prem[1]
                freq[most] = undefined
            } else {
                if (parent) {
                    parent.pop()
                }
                break
            }
        }

        let out = ""
        let cb = (rt) => {
            out += rt[0]
            if (rt[1]) cb(rt[1])
        }
        cb(construct)
        out = runTest(out, null, true) || "UNCOMP" + out
        W.WU(5, Math.floor(Math.log2(str.length == 0 ? 1 : str.length)) + 1)
        W.WU(Math.floor(Math.log2(str.length == 0 ? 1 : str.length)) + 1, str.length)
        str.split("").forEach((char) => {
            function trnsv(sf) {
                if (sf[0] == char) {
                    W.WU(1, 0)
                } else {
                    W.WU(1, 1)
                    trnsv(sf[1])
                }
            }
            trnsv(construct)
        })
        results.type6.result = out + ";" + W.G()
        results.type6.done = true
    }
    Object.keys(results).forEach((type) => {
        if (results[type] && results[type].done && results[type].result) {
            let MD = new BB()
            let LZC = ""
            let PKC = ""
            let RRC = ""
            let temp = LZ.compress(results[type].result)
            if (LZ.decompress(temp) == results[type].result) { LZC = temp.replace("` \" K", "⁑").replace("` \" ", "⁕").replace("` ", "•") } else { throw new Error("Mismatch 1") }
            // if (settings && settings.PakoCompress) {
            temp = deflate(results[type].result)
            if (new TextDecoder().decode(inflate(temp)) == results[type].result) {
                let W = new BB()
                temp.forEach((byte) => {
                    if (byte >= 2 ** 8) throw new Error("OOR")
                    W.WU(8, byte)
                })
                PKC = W.G()
            } else { throw new Error("Mismatch 2") }
            // }
            // if (!AntiBreak) RRC = runTest(str, null, true)
            // console.log("DATA", "\n1.", LZC, "\n2.", PKC, "\n3.", PZC, "\n4.", LKC)
            // if (LZC.length <= PKC.length && LZC.length <= PZC.length && LZC.length <= LKC.length && LZC.length < results[type].result.length) {
            //     MD.WU(5, 0)
            //     results[type].result = LZC
            // } else if (PKC.length <= LZC.length && PKC.length <= PZC.length && PKC.length <= LKC.length && PKC.length < results[type].result.length) {
            //     MD.WU(5, 1)
            //     results[type].result = PKC
            // } else if (PZC.length <= PKC.length && PZC.length <= PZC.length && PZC.length <= LKC.length && PZC.length < results[type].result.length) {
            //     MD.WU(5, 2)
            //     results[type].result = PZC
            // } else if (LKC.length <= PKC.length && LKC.length <= PZC.length && LKC.length <= LZC.length && LKC.length < results[type].result.length) {
            //     MD.WU(5, 3)
            //     results[type].result = LKC
            // } else {
            //     MD.WU(5, 31)
            // }
            // results[type].result = MD.G() + results[type].result
            let success = [results[type].result.length]
            if (PKC && PKC.length > 0) success.push(PKC.length)
            if (LZC && LZC.length > 0) success.push(LZC.length)
            if (RRC && RRC.length > 0) success.push(RRC.length)
            let smallest = Math.min(...success)
            if (smallest == LZC.length && LZC.length > 0) {
                results[type].result = LZC
                MD.WU(5, 1)
            } else if (smallest == PKC.length && PKC.length > 0) {
                results[type].result = PKC
                MD.WU(5, 2)
            }
            // else if (smallest == RRC.length && RRC.length > 0) {
            //     results[type].result = RRC
            //     MD.WU(5, 3)
            // } 
            else {
                MD.WU(5, 31)
            }
            results[type].result = MD.G() + results[type].result
        }
    })
    let largest = null
    let size = Infinity
    Object.keys(results).forEach((type) => {
        if (results[type] && results[type].done && results[type].result) {
            if (results[type].result.length < size) { size = results[type].result.length; largest = type }
        }
    })
    if (specificTest) largest = specificTest
    if (largest) {
        let id = parseInt(largest.substring(4))
        if (id) {
            CompData.WU(5, id)
            if (netdecompress(encodeSafe(CompData.G() + results[largest].result)) == str) {
                return encodeSafe(CompData.G() + results[largest].result)
            } else {
                return "UNCOMP" + encodeSafe(str)
            }
        } else { throw new Error("Cannot find type " + largest) }
    } else {
        return "UNCOMP" + encodeSafe(str)
    }
}
export function netcompress(str, imdtyp, sett) {
    let out = runTest(str, imdtyp, false, sett); return out
}
export function netdecompress(str) {
    if (str.startsWith("UNCOMP")) return decodeSafe(str.substring(6))
    str = decodeSafe(str)
    let meta = str.substring(0, 2)
    str = str.substring(2)
    let r = new BB()
    r.F(meta)
    let ver = r.RU(5)
    let id = r.RU(5)
    {
        if (ver == 0 && (id == 5 || id == 3)) {
            alert("Due to changes this version cannot uncompress this file. Please go back to 1.1.0 and convert.")
            return
        }
    }
    let out = ""
    let finals = str.substring(0, 1)
    str = str.substring(1)
    r = new BB()
    r.F(finals)
    let typ = r.RU(5)
    switch (typ) {
        case 1:
            str = LZ.decompress(str.replace("⁑", "` \" K").replace("•", "` ").replace("⁕", "` \" "))
            break
        case 2:
            let sta = new BB()
            sta.F(str)
            let bk = []
            while (true) { let nr = sta.RU(8); if (isNaN(nr)) { break }; bk.push(nr) }
            str = new TextDecoder().decode(inflate(new Uint8Array(bk)))
            break
        case 3:
            str = netdecompress(str) || str
            break
    }
    let W = new BB()
    W.F(str)
    switch (id) {
        case 1:
            while (true) {
                let n = W.RU(5)
                if (!isNaN(n)) {
                    out += type1swap[n]
                } else break
            }
            break;
        case 2:
            let size = W.RU(8)
            let small = W.RU(8)
            while (true) {
                let n = W.RU(Math.ceil(Math.log2(size)) + 1)
                if (!isNaN(n) && n != 0) {
                    out += String.fromCharCode(n + small - 1)
                } else break
            }
            break;
        case 3:
            let go = true
            while (go) {
                let n = W.RU(2)
                if (isNaN(n)) break
                switch (n) {
                    case 0:
                        out += wordDict[W.RU(12)] || ""
                        break;
                    case 1:
                        out += wordDictSmall[W.RU(3)] || ""
                        break;
                    case 2:
                        out += wordDictTiny[W.RU(2)] || ""
                        break;
                    case 3:
                        let chid = 0
                        if (id == 5) chid = W.RU(6) + 64
                        if (id == 3) chid = W.RU(8)
                        out += String.fromCharCode(chid)
                        break;
                }
            }
            break;
        case 5:
            let go2 = true
            while (go2) {
                let n = W.RU(3)
                if (isNaN(n)) break
                switch (n) {
                    case 0:
                        out += wordDictLarge[W.RU(13)] || ""
                        break;
                    case 1:
                        out += wordDict[W.RU(12)] || ""
                        break;
                    case 2:
                        out += wordDictSmall[W.RU(3)] || ""
                        break;
                    case 3:
                        out += wordDictTiny[W.RU(2)] || ""
                        break;
                    case 4:
                        let chid = 0
                        if (id == 5) chid = W.RU(6) + 64
                        if (id == 3) chid = W.RU(8)
                        out += String.fromCharCode(chid)
                        break;
                }
            }
            break;
        case 4:
            out += str
            break;
        case 6:
            let tree = netdecompress(str.split(";")[0])
            let data = str.split(";")[1]
            let nt = []
            let prem = nt
            let LW = new BB()
            LW.F(data)
            tree.split("").forEach((char) => {
                prem[0] = char
                prem[1] = []
                prem = prem[1]
            })

            let hfout = ""
            let cache = nt
            let ss = LW.RU(5)
            let slen = LW.RU(ss)
            while (true) {
                let nb = LW.RU(1)
                if (nb >= 0) {
                    if (nb == 0) {
                        hfout += cache[0]
                        cache = nt
                        if (hfout.length >= slen) break
                    } else if (nb == 1) {
                        cache = cache[1]
                    }
                } else {
                    break
                }
            }
            out += hfout
            break;
    }
    return out
}

export function plugincompress(file, str, settings) {
    return undefined


    let res = []
    plugins.forEach((funcs, i) => {
        if (funcs.CanDo && funcs.CanDo(file, str, settings)) {
            let out = funcs.Compress(file, str, settings, BB)
            if (out && out.length < str.length) res.push([i, out])
        }
    })
    console.log(file, res)
    return undefined
}
export function plugindecompress(file, str) {
    return undefined


    let res = []
    plugins.forEach((funcs, i) => {
        if (funcs.CanUnDo && funcs.CanUnDo(file, str)) {
            let out = funcs.Decompress(file, str, BB)
            if (out && out.length < str.length) res.push([i, out])
        }
    })
    console.log(file, res)
    return undefined
}